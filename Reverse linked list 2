/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head || left == right) return head;  // If the list is empty or no need to reverse, return the head.

        // Create a dummy node to simplify edge cases where left = 1
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        ListNode* prev = dummy;

        // Move prev to the node just before the left-th node
        for (int i = 1; i < left; ++i) {
            prev = prev->next;
        }

        // The first node in the sublist to reverse
        ListNode* cur = prev->next;
        ListNode* tail = cur;  // Tail will be the last node of the reversed portion

        // Reverse the sublist from left to right
        for (int i = left; i < right; ++i) {
            ListNode* nextTemp = cur->next;
            cur->next = nextTemp->next;
            nextTemp->next = prev->next;
            prev->next = nextTemp;
        }

        return dummy->next;  // Return the new head (which might be different if left was 1)
    }
};
